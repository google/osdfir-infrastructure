apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-yeti-redis
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/component: redis
    {{- include "yeti.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: redis
      {{- include "yeti.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: redis
        {{- include "yeti.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
      hostNetwork: false
      hostIPC: false
      automountServiceAccountToken: false
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: IfNotPresent
          command: ["redis-server" , "--appendonly yes"]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: REDIS_REPLICATION_MODE
              value: "master"
          volumeMounts:
            - mountPath: /data
              name: data
          ports:
            - containerPort: 6379
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
      {{- with .Values.redis.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.redis.persistence.size }}