apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-timesketch-init-configmap
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "timesketch.labels" . | nindent 4 }}
data:
  init-timesketch.sh: |
    #!/bin/sh
    set -e

    # Create timesketch config directory
    mkdir -p /etc/timesketch
    cd /etc/timesketch

    # Check if a base64 encoded config tarball is provided
    if [ -f /tmp/timesketch/ts-configs.tgz.b64 ]; then
      echo "Using existing configuration provided via base64 encoded tarball (ts-configs.tgz.b64)."
      ls /tmp/timesketch/
      base64 -d /tmp/timesketch/ts-configs.tgz.b64 | tar --no-same-owner -xzf - -C /etc/timesketch/
      echo "Extracted configuration to /etc/timesketch/ - confirmation:"
      ls -lah /etc/timesketch/
    elif [ $(ls /tmp/timesketch/ | wc -l) -gt 0 ]; then
      echo "Using existing configuration files provided directly in /tmp/timesketch/."
      cp /tmp/timesketch/* /etc/timesketch/
      ls -lah /etc/timesketch/
      echo "Copied configuration files."
    else
      echo "No existing configuration found. Fetching default configuration files from GitHub.."
      # Using a temporary directory for cloning
      TMP_CLONE_DIR=$(mktemp -d)
      # Try cloning the specific tag/branch first, fallback to master if it fails
      echo "Attempting to clone branch/tag: {{ .Values.image.tag }}"
      if ! git clone --depth 1 --branch {{ .Values.image.tag }} https://github.com/google/timesketch.git "$TMP_CLONE_DIR"; then
        echo "Failed to clone branch/tag '{{ .Values.image.tag }}', falling back to 'master' branch."
        # Clean up potentially partially cloned directory before retrying
        rm -rf "$TMP_CLONE_DIR" && mkdir -p "$TMP_CLONE_DIR"
        git clone --depth 1 --branch master https://github.com/google/timesketch.git "$TMP_CLONE_DIR"
      fi
      # Copy only the necessary data directory contents
      cp -a "$TMP_CLONE_DIR"/data/* /etc/timesketch/
      # Clean up the temporary clone directory
      rm -rf "$TMP_CLONE_DIR"
      echo "OK"
    fi

    # Set up the Redis connection
    sed -i 's#^CELERY_BROKER_URL =.*#CELERY_BROKER_URL = {{ (include "timesketch.redis.url" .) | quote }}#' timesketch.conf
    sed -i 's#^CELERY_RESULT_BACKEND =.*#CELERY_RESULT_BACKEND = {{ (include "timesketch.redis.url" .) | quote }}#' timesketch.conf

    # Set up the Postgresql connection
    sed -i 's#postgresql://<USERNAME>:<PASSWORD>@localhost/timesketch#{{ include "timesketch.postgresql.url" . }}#' timesketch.conf

    # Set up the Opensearch connection
    sed -i 's#^OPENSEARCH_HOST =.*#OPENSEARCH_HOST = {{ (include "timesketch.opensearch.host" .) | quote }}#' timesketch.conf

    # Set up secret
    sed -i 's#^SECRET_KEY =.*#SECRET_KEY = "'$TIMESKETCH_SECRET'"#' timesketch.conf

    # Set up upload folder
    sed -i 's#^UPLOAD_ENABLED = False#UPLOAD_ENABLED = True#' timesketch.conf
    sed -i 's#^UPLOAD_FOLDER =.*#UPLOAD_FOLDER =  "/mnt/timesketchvolume"#' timesketch.conf

    # Update scenarios paths
    sed -i 's#^SCENARIOS_PATH =.*#SCENARIOS_PATH = "/etc/timesketch/scenarios.yaml"#' timesketch.conf
    sed -i 's#^FACETS_PATH =.*#FACETS_PATH = "/etc/timesketch/facets.yaml"#' timesketch.conf
    sed -i 's#^QUESTIONS_PATH =.*#QUESTIONS_PATH = "/etc/timesketch/questions.yaml"#' timesketch.conf

    # OIDC integration
    {{- if and .Values.config.oidc.enabled .Values.config.oidc.existingSecret }}
    sed -i 's#^GOOGLE_OIDC_ENABLED =.*#GOOGLE_OIDC_ENABLED = True#' timesketch.conf
    sed -i 's#^GOOGLE_OIDC_AUTH_URL =.*#GOOGLE_OIDC_AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth"#' timesketch.conf
    sed -i 's#^GOOGLE_OIDC_DISCOVERY_URL =.*#GOOGLE_OIDC_DISCOVERY_URL = "https://accounts.google.com/.well-known/openid-configuration"#' timesketch.conf
    sed -i 's#^GOOGLE_OIDC_ALGORITHM =.*#GOOGLE_OIDC_ALGORITHM = "RS256"#' timesketch.conf
    sed -i 's#^GOOGLE_OIDC_CLIENT_ID =.*#GOOGLE_OIDC_CLIENT_ID = "'$OIDC_CLIENT_ID'"#' timesketch.conf
    sed -i 's#^GOOGLE_OIDC_CLIENT_SECRET =.*#GOOGLE_OIDC_CLIENT_SECRET = "'$OIDC_CLIENT_SECRET'"#' timesketch.conf
    sed -i 's#^GOOGLE_OIDC_API_CLIENT_ID =.*#GOOGLE_OIDC_API_CLIENT_ID = "'$OIDC_CLIENT_ID_NATIVE'"#' timesketch.conf
    {{- if .Values.config.oidc.authenticatedEmailsFile.enabled }}
    export EMAILS=$(awk '{printf "\"%s\", ", $0}' /init/authenticated-emails/authenticated-emails-list | sed 's/, $//; s/^/[/; s/$/]/')
    sed -i 's#^GOOGLE_OIDC_ALLOWED_USERS =.*#GOOGLE_OIDC_ALLOWED_USERS = '"$EMAILS"'#' timesketch.conf
    {{- end }}
    {{- end }}

    # Yeti integration
    {{- if .Values.global.yeti.enabled }}
    sed -i 's#^YETI_API_KEY =.*#YETI_API_KEY = "'$YETI_API_KEY'"#' timesketch.conf
    sed -i 's#^YETI_API_ROOT =.*#YETI_API_ROOT =  {{ printf "http://%s-yeti:9000/api/v2" .Release.Name | quote }}#' timesketch.conf
    {{- end }}
